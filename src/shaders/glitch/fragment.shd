#version 420

uniform sampler2D texture_sampler;
uniform float rnd; // [0.0-1.0]rnd is different per frame but it is the same for all pixels
uniform float rnd2; //same as rnd2 but [0.0-1.0), used to decide shifting method

float M_PI = 3.14159265;
float n = 5;
float intensity = 0.002;
float horizontal_prob = 0.8;

layout(location=0) out vec4 output_color;

in vec2 interpolated_uv;

float displacement_func(float n)
{
    return n * sin(n * M_PI) + n * cos(n * M_PI);
}

float delta; // amount of shift

vec2 horizontal_shift(vec2 uv) {
    for(float i = 0.0; i < n; ++i) {

    //displacement_func to control amount of shift each segment
    delta = displacement_func(rnd+i/n)* intensity;

    //check if the current position/uv is in the segment
    if(uv.y >= i/n && uv.y <= (i + 1)/n)
        uv.x += delta;
    }
    return uv;
}

vec2 vertical_shift(vec2 uv) {
    for(float i = 0.0; i < n; ++i) {

    //displacement_func to control amount of shift each segment
    delta = displacement_func(rnd+i/n)* intensity;

    //check if the current position/uv is in the segment
    if(uv.x >= i/n && uv.x <= (i + 1)/n)
        uv.y += delta;
    }
    return uv;
}


void main() {
    vec2 uv = interpolated_uv;
    if (rnd2 < horizontal_prob) //russian roulette
    {
        //simple horizontally shift
        uv = horizontal_shift(uv);
    }
    else {
        uv = vertical_shift(uv);
    }
    vec4 c = texture(texture_sampler, uv);
    output_color = c;
}
