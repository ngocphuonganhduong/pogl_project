#version 420

uniform sampler2D texture_sampler;
uniform float rnd;
uniform float rnd2;

float M_PI = 3.14159265;
float n = 10;
float intensity = 0.008;

layout(location=0) out vec4 output_color;

in vec2 interpolated_uv;

float displacement_func(float n)
{
    return sin(n * M_PI + n) + cos(n * M_PI + n);
}

void main() {
    vec2 uv = interpolated_uv;

    //simple horizontally shift
    float delta; // amount of shift

    //divide the texture horizontally in n parts

    for(float i = 0.0; i < n; ++i) {
        //the intensity is different for each part
        //rnd is the same for all parts => need displacement_func
        delta = displacement_func(rnd+i/n)* intensity;

        //check if the current position/uv is in the sample
        if(uv.y >= i/n && uv.y <= (i + 1)/n)
            uv.x += delta;
    }
    vec4 c = texture(texture_sampler, uv);
    output_color = c;
}
